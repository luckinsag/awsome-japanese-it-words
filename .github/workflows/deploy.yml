name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  EC2_IP: ${{ secrets.EC2_IP }}
  EC2_USER: ${{ secrets.EC2_USER }}
  KEY_FILE: ./deploy-key.pem

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Test Backend
      run: |
        cd itwords_api
        mvn test
      continue-on-error: false
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: itwords_display/package-lock.json
    
    - name: Test Frontend
      run: |
        cd itwords_display
        npm ci
        npm run build
      continue-on-error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: itwords_display/package-lock.json
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create EC2 key file
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > $KEY_FILE
        chmod 400 $KEY_FILE
    
    - name: Build Docker images
      env:
        DOCKER_DEFAULT_PLATFORM: linux/amd64
      run: |
        echo "构建后端镜像..."
        docker compose build --no-cache backend
        if [ $? -ne 0 ]; then
          echo "❌ 后端镜像构建失败"
          exit 1
        fi
        
        echo "构建前端镜像..."
        docker compose build --no-cache frontend
        if [ $? -ne 0 ]; then
          echo "❌ 前端镜像构建失败"
          exit 1
        fi
        
        echo "获取镜像信息..."
        docker images
        
        echo "获取构建的镜像..."
        BACKEND_IMAGE=$(docker images --filter "reference=*backend*" --format "{{.Repository}}:{{.Tag}}" | head -1)
        FRONTEND_IMAGE=$(docker images --filter "reference=*frontend*" --format "{{.Repository}}:{{.Tag}}" | head -1)
        
        if [ -z "$BACKEND_IMAGE" ] || [ "$BACKEND_IMAGE" = "<none>:<none>" ]; then
          BACKEND_IMAGE=$(docker images --filter "reference=itwords*backend*" --format "{{.Repository}}:{{.Tag}}" | head -1)
        fi
        
        if [ -z "$FRONTEND_IMAGE" ] || [ "$FRONTEND_IMAGE" = "<none>:<none>" ]; then
          FRONTEND_IMAGE=$(docker images --filter "reference=itwords*frontend*" --format "{{.Repository}}:{{.Tag}}" | head -1)
        fi
        
        if [ -z "$BACKEND_IMAGE" ] || [ "$BACKEND_IMAGE" = "<none>:<none>" ]; then
          BACKEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(backend|itwords.*backend)" | head -1)
        fi
        
        if [ -z "$FRONTEND_IMAGE" ] || [ "$FRONTEND_IMAGE" = "<none>:<none>" ]; then
          FRONTEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(frontend|itwords.*frontend)" | head -1)
        fi
        
        if [ -n "$BACKEND_IMAGE" ] && [ -n "$FRONTEND_IMAGE" ] && [ "$BACKEND_IMAGE" != "<none>:<none>" ] && [ "$FRONTEND_IMAGE" != "<none>:<none>" ]; then
          echo "✅ 找到镜像: 后端=$BACKEND_IMAGE, 前端=$FRONTEND_IMAGE"
        else
          echo "❌ 无法获取镜像信息"
          echo "后端镜像: $BACKEND_IMAGE"
          echo "前端镜像: $FRONTEND_IMAGE"
          echo "所有镜像列表:"
          docker images
          exit 1
        fi
        
        mkdir -p deploy-images
        echo "保存后端镜像: $BACKEND_IMAGE"
        docker save "$BACKEND_IMAGE" -o deploy-images/backend.tar
        echo "保存前端镜像: $FRONTEND_IMAGE"
        docker save "$FRONTEND_IMAGE" -o deploy-images/frontend.tar
        tar -czf deploy-images.tar.gz -C deploy-images .
        
        echo "$BACKEND_IMAGE" > backend-image-name.txt
        echo "$FRONTEND_IMAGE" > frontend-image-name.txt
    
    - name: Create deployment compose file
      run: |
        BACKEND_IMAGE=$(cat backend-image-name.txt)
        FRONTEND_IMAGE=$(cat frontend-image-name.txt)
        
        cat > deploy-compose.yml << 'COMPOSE_EOF'
        services:
          mysql:
            image: mysql:8.0
            container_name: itwords-mysql
            restart: unless-stopped
            environment:
              MYSQL_ROOT_PASSWORD: xcx981211
              MYSQL_DATABASE: mysql_itwordslearning
              MYSQL_USER: itwords_user
              MYSQL_PASSWORD: itwords_password
            ports:
              - "3306:3306"
            volumes:
              - mysql_data:/var/lib/mysql
              - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
            networks:
              - itwords-network
            healthcheck:
              test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
              timeout: 20s
              retries: 10

          backend:
            image: BACKEND_IMAGE_PLACEHOLDER
            container_name: itwords-backend
            restart: unless-stopped
            environment:
              SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mysql_itwordslearning?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Tokyo&useUnicode=true&characterEncoding=utf8
              SPRING_DATASOURCE_USERNAME: root
              SPRING_DATASOURCE_PASSWORD: xcx981211
              SERVER_PORT: 8080
            ports:
              - "8080:8080"
            depends_on:
              mysql:
                condition: service_healthy
            networks:
              - itwords-network
            healthcheck:
              test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || curl -f http://localhost:8080/actuator/health || exit 1"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s

          frontend:
            image: FRONTEND_IMAGE_PLACEHOLDER
            container_name: itwords-frontend
            restart: unless-stopped
            ports:
              - "80:80"
            depends_on:
              backend:
                condition: service_healthy
            networks:
              - itwords-network
            healthcheck:
              test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost || curl -f http://localhost || exit 1"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 30s

        volumes:
          mysql_data:
            driver: local

        networks:
          itwords-network:
            driver: bridge
        COMPOSE_EOF
        
        sed -i "s/BACKEND_IMAGE_PLACEHOLDER/$BACKEND_IMAGE/g" deploy-compose.yml
        sed -i "s/FRONTEND_IMAGE_PLACEHOLDER/$FRONTEND_IMAGE/g" deploy-compose.yml
        
        echo "生成的docker-compose文件:"
        cat deploy-compose.yml
    
    - name: Deploy to EC2
      run: |
        echo "检查EC2连接..."
        ssh -i $KEY_FILE -o StrictHostKeyChecking=no -o ConnectTimeout=10 $EC2_USER@$EC2_IP "echo 'EC2连接成功'" || {
          echo "❌ 无法连接到EC2实例"
          exit 1
        }
        
        echo "传输镜像文件..."
        ssh -i $KEY_FILE -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP "mkdir -p ~/itwords-images"
        scp -i $KEY_FILE -o StrictHostKeyChecking=no deploy-images.tar.gz $EC2_USER@$EC2_IP:~/itwords-images/ || {
          echo "❌ 镜像文件传输失败"
          exit 1
        }
        
        scp -i $KEY_FILE -o StrictHostKeyChecking=no deploy-compose.yml $EC2_USER@$EC2_IP:~/itwords-images/
        scp -i $KEY_FILE -o StrictHostKeyChecking=no scripts/data-processing/init.sql $EC2_USER@$EC2_IP:~/itwords-images/
        scp -i $KEY_FILE -o StrictHostKeyChecking=no complete_wordlist.csv $EC2_USER@$EC2_IP:~/itwords-images/
        scp -i $KEY_FILE -o StrictHostKeyChecking=no scripts/data-processing/import_words_final.sh $EC2_USER@$EC2_IP:~/itwords-images/
    
    - name: Start application on EC2
      run: |
        ssh -i $KEY_FILE -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << 'DEPLOY_SCRIPT'
          cd ~/itwords-images
          
          # 检测Docker Compose命令
          if command -v docker-compose >/dev/null 2>&1; then
            COMPOSE_CMD="docker-compose"
            echo "使用docker-compose命令"
          elif docker compose version >/dev/null 2>&1; then
            COMPOSE_CMD="docker compose"
            echo "使用docker compose命令"
          else
            echo "❌ 未找到Docker Compose命令"
            exit 1
          fi
          
          # 停止现有容器
          $COMPOSE_CMD -f deploy-compose.yml down -v 2>/dev/null || true
          
          # 清理Docker系统
          echo "清理Docker系统..."
          docker container prune -f 2>/dev/null || true
          docker image prune -f 2>/dev/null || true
          docker volume prune -f 2>/dev/null || true
          docker network prune -f 2>/dev/null || true
          
          # 解压并加载镜像
          echo "解压镜像文件..."
          tar -xzf deploy-images.tar.gz
          
          echo "加载后端镜像..."
          docker load -i backend.tar
          
          echo "加载前端镜像..."
          docker load -i frontend.tar
          
          echo "加载完成的镜像列表:"
          docker images
          
          # 清理临时文件
          rm -f *.tar deploy-images.tar.gz
          
          echo "启动应用..."
          $COMPOSE_CMD -f deploy-compose.yml up -d
          
          # 等待服务启动
          echo "等待服务启动..."
          for i in {1..60}; do
            if $COMPOSE_CMD -f deploy-compose.yml ps | grep -q "Up"; then
              echo "✅ 服务已启动"
              break
            fi
            echo "等待中... ($i/60)"
            sleep 5
          done
          
          # 检查服务状态
          echo "检查服务状态:"
          $COMPOSE_CMD -f deploy-compose.yml ps
          
          # 检查服务健康状态
          echo "检查服务健康状态:"
          $COMPOSE_CMD -f deploy-compose.yml logs --tail=50
          
          # 等待MySQL完全启动
          echo "等待MySQL完全启动..."
          sleep 30
          
          # 导入单词数据
          echo "开始导入单词数据..."
          if [ -f "complete_wordlist.csv" ] && [ -f "import_words_final.sh" ]; then
            chmod +x import_words_final.sh
            ./import_words_final.sh
            echo "✅ 单词数据导入完成"
          else
            echo "❌ 缺少必要文件：complete_wordlist.csv 或 import_words_final.sh"
            echo "当前目录文件列表："
            ls -la
          fi
        DEPLOY_SCRIPT
    
    - name: Verify deployment
      run: |
        echo "等待服务完全启动..."
        sleep 30
        
        echo "测试后端API..."
        for i in {1..12}; do
          if curl -f -s http://$EC2_IP:8080/actuator/health > /dev/null 2>&1; then
            echo "✅ 后端API外部访问成功"
            break
          fi
          echo "等待后端API... ($i/12)"
          sleep 10
        done
        
        echo "测试前端..."
        for i in {1..6}; do
          if curl -f -s http://$EC2_IP > /dev/null 2>&1; then
            echo "✅ 前端外部访问成功"
            break
          fi
          echo "等待前端... ($i/6)"
          sleep 10
        done
        
        echo "最终验证..."
        if curl -f -s http://$EC2_IP:8080/actuator/health > /dev/null 2>&1; then
          echo "✅ 后端API外部访问成功"
        else
          echo "❌ 后端API外部访问失败"
          exit 1
        fi
        
        if curl -f -s http://$EC2_IP > /dev/null 2>&1; then
          echo "✅ 前端外部访问成功"
        else
          echo "❌ 前端外部访问失败"
          exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        rm -f $KEY_FILE
        rm -rf deploy-images
        rm -f deploy-images.tar.gz
        rm -f backend-image-name.txt
        rm -f frontend-image-name.txt
        rm -f deploy-compose.yml
    
    - name: Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功！"
          echo "🌐 应用地址: http://$EC2_IP"
          echo "🔧 后端API: http://$EC2_IP:8080"
          echo "📊 健康检查: http://$EC2_IP:8080/actuator/health"
        else
          echo "❌ 部署失败！"
          echo "请检查日志获取详细信息"
        fi 