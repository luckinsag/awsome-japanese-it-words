name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  EC2_IP: ${{ secrets.EC2_IP }}
  EC2_USER: ${{ secrets.EC2_USER }}
  KEY_FILE: ./deploy-key.pem

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Test Backend
      run: |
        cd itwords_api
        mvn test
      continue-on-error: false
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: itwords_display/package-lock.json
    
    - name: Test Frontend
      run: |
        cd itwords_display
        npm ci
        npm run build
      continue-on-error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: itwords_display/package-lock.json
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create EC2 key file
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > $KEY_FILE
        chmod 400 $KEY_FILE
    
    - name: Build and push Docker images
      env:
        DOCKER_DEFAULT_PLATFORM: linux/amd64
      run: |
        # 构建后端镜像
        echo "构建后端镜像..."
        docker compose build --no-cache backend
        if [ $? -ne 0 ]; then
          echo "❌ 后端镜像构建失败"
          exit 1
        fi
        
        # 构建前端镜像
        echo "构建前端镜像..."
        docker compose build --no-cache frontend
        if [ $? -ne 0 ]; then
          echo "❌ 前端镜像构建失败"
          exit 1
        fi
        
        # 获取正确的镜像名称
        BACKEND_IMAGE=$(docker compose images -q backend)
        FRONTEND_IMAGE=$(docker compose images -q frontend)
        
        # 验证镜像ID
        if [ -z "$BACKEND_IMAGE" ]; then
          echo "❌ 无法获取后端镜像ID"
          exit 1
        fi
        if [ -z "$FRONTEND_IMAGE" ]; then
          echo "❌ 无法获取前端镜像ID"
          exit 1
        fi
        
        echo "后端镜像ID: $BACKEND_IMAGE"
        echo "前端镜像ID: $FRONTEND_IMAGE"
        
        # 保存镜像
        mkdir -p deploy-images
        docker save $BACKEND_IMAGE -o deploy-images/backend.tar
        docker save $FRONTEND_IMAGE -o deploy-images/frontend.tar
        tar -czf deploy-images.tar.gz -C deploy-images .
    
    - name: Deploy to EC2
      run: |
        # 检查EC2连接
        echo "检查EC2连接..."
        ssh -i $KEY_FILE -o StrictHostKeyChecking=no -o ConnectTimeout=10 $EC2_USER@$EC2_IP "echo 'EC2连接成功'" || {
          echo "❌ 无法连接到EC2实例"
          exit 1
        }
        
        # 传输镜像
        echo "传输镜像文件..."
        scp -i $KEY_FILE -o StrictHostKeyChecking=no deploy-images.tar.gz $EC2_USER@$EC2_IP:~/itwords-images/ || {
          echo "❌ 镜像文件传输失败"
          exit 1
        }
        
        # 创建部署配置文件
        cat > deploy-compose.yml << 'EOF'
version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: itwords-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: xcx981211
      MYSQL_DATABASE: mysql_itwordslearning
      MYSQL_USER: itwords_user
      MYSQL_PASSWORD: itwords_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - itwords-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  backend:
    image: backend:latest
    container_name: itwords-backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mysql_itwordslearning?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Tokyo&useUnicode=true&characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: xcx981211
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - itwords-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: frontend:latest
    container_name: itwords-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - itwords-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
    driver: local
  backend_logs:
    driver: local

networks:
  itwords-network:
    driver: bridge
EOF

        # 传输配置文件
        scp -i $KEY_FILE -o StrictHostKeyChecking=no deploy-compose.yml $EC2_USER@$EC2_IP:~/itwords-images/
        scp -i $KEY_FILE -o StrictHostKeyChecking=no scripts/data-processing/init.sql $EC2_USER@$EC2_IP:~/itwords-images/init.sql 2>/dev/null || echo "init.sql 不存在，跳过"
        scp -i $KEY_FILE -o StrictHostKeyChecking=no complete_wordlist.csv $EC2_USER@$EC2_IP:~/itwords-images/ 2>/dev/null || echo "complete_wordlist.csv 不存在，跳过"
        
        # 在EC2上部署
        ssh -i $KEY_FILE -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP '
            cd ~/itwords-images
            
            # 停止现有容器
            docker compose -f deploy-compose.yml down -v 2>/dev/null || true
            docker system prune -f
            
            # 解压并加载镜像
            tar -xzf deploy-images.tar.gz
            docker load -i backend.tar
            docker load -i frontend.tar
            
            # 获取加载的镜像名称（更精确的匹配）
            BACKEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "^[^/]+backend:" | head -1)
            FRONTEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "^[^/]+frontend:" | head -1)
            
            echo "加载的后端镜像: $BACKEND_IMAGE"
            echo "加载的前端镜像: $FRONTEND_IMAGE"
            
            # 验证镜像名称
            if [ -z "$BACKEND_IMAGE" ]; then
                echo "❌ 无法找到后端镜像"
                exit 1
            fi
            if [ -z "$FRONTEND_IMAGE" ]; then
                echo "❌ 无法找到前端镜像"
                exit 1
            fi
            
            # 更新deploy-compose.yml中的镜像名称
            sed -i "s|image: backend:latest|image: $BACKEND_IMAGE|g" deploy-compose.yml
            sed -i "s|image: frontend:latest|image: $FRONTEND_IMAGE|g" deploy-compose.yml
            
            # 清理临时文件
            rm -f *.tar deploy-images.tar.gz
            
            # 启动应用
            docker compose -f deploy-compose.yml up -d
            
            # 等待服务启动（动态等待）
            echo "等待服务启动..."
            for i in {1..30}; do
                if docker compose -f deploy-compose.yml ps | grep -q "Up"; then
                    echo "✅ 服务已启动"
                    break
                fi
                echo "等待中... ($i/30)"
                sleep 10
            done
            
            # 检查状态
            docker compose -f deploy-compose.yml ps
            
            # 测试连接
            echo "测试服务连接..."
            for i in {1..6}; do
                if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
                    echo "✅ 后端API连接成功"
                    break
                fi
                echo "等待后端API... ($i/6)"
                sleep 10
            done
            
            for i in {1..6}; do
                if curl -f http://localhost 2>/dev/null; then
                    echo "✅ 前端连接成功"
                    break
                fi
                echo "等待前端... ($i/6)"
                sleep 10
            done
        '
    
    - name: Verify deployment
      run: |
        # 等待服务完全启动
        echo "等待服务完全启动..."
        for i in {1..12}; do
            if curl -f http://$EC2_IP:8080/actuator/health 2>/dev/null; then
                echo "✅ 后端API外部访问成功"
                break
            fi
            echo "等待后端API外部访问... ($i/12)"
            sleep 10
        done
        
        # 测试外部访问
        echo "测试外部访问..."
        if curl -f http://$EC2_IP:8080/actuator/health 2>/dev/null; then
            echo "✅ 后端API外部访问成功"
        else
            echo "❌ 后端API外部访问失败"
            exit 1
        fi
        
        if curl -f http://$EC2_IP 2>/dev/null; then
            echo "✅ 前端外部访问成功"
        else
            echo "❌ 前端外部访问失败"
            exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        rm -f $KEY_FILE
        rm -rf deploy-images
        rm -f deploy-images.tar.gz
    
    - name: Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功！"
          echo "🌐 应用地址: http://$EC2_IP"
          echo "🔧 后端API: http://$EC2_IP:8080"
        else
          echo "❌ 部署失败！"
          echo "请检查日志获取详细信息"
        fi 